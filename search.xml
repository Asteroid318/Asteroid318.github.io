<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux基础</title>
    <url>/2025/03/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="1-Linux目录结构"><a href="#1-Linux目录结构" class="headerlink" title="1.Linux目录结构"></a>1.Linux目录结构</h1><p>  &emsp;在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。</p>
<p>  &emsp;文件系统的最顶层是由根目录开始的，系统使用 / 来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。</p>
<p>  &emsp;根目录下usr文件夹中的hello.txt文件的路径描述方式为: /usr/hello.txt.<br>  <div class="note warning modern"><p>第一个“/”表示根目录</p>
</div>    </p>
<p>  &emsp;在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点 . 来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点 .. 来表示。</p>
<p>  &emsp;<code>如果一个目录或文件名以一个点 . 开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</code></p>
<h1 id="2-Linux命令"><a href="#2-Linux命令" class="headerlink" title="2.Linux命令"></a>2.Linux命令</h1><h2 id="2-1-Linux命令格式"><a href="#2-1-Linux命令格式" class="headerlink" title="2.1 Linux命令格式"></a>2.1 Linux命令格式</h2><div class="note modern"><p>command &emsp;[-options] &emsp;[parameter]</p>
</div>
<ul>
<li>command: 命令本身</li>
<li>-options: 命令的一些选项, 可以控制命令的行为细节</li>
<li>parameter: 命令的参数, 多数用于命令的指向目标</li>
</ul>
<h2 id="2-2-Linux命令"><a href="#2-2-Linux命令" class="headerlink" title="2.2 Linux命令"></a>2.2 Linux命令</h2><h3 id="2-2-1-ls命令"><a href="#2-2-1-ls命令" class="headerlink" title="2.2.1 ls命令"></a>2.2.1 ls命令</h3><div class="note modern"><p>ls &emsp;[-a -l -h] &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于列出当前目录的的内容</span></p>
<blockquote>
<p>-a: 此选项可列出隐藏的目录或文件<br>-l: 此选项将内容以竖向排列展示, 显示更多信息, 如权限, 创建时间<br>-h: 与-l选项组合使用, 详细显示列出内容的文件大小</p>
</blockquote>
</div>
<div class="note info modern"><p>各选项可以组合使用, 如 ls -lah 等同于 ls -a -l -h</p>
</div>
<p>&nbsp;</p>
<h3 id="2-2-2-cd-amp-pwd-命令"><a href="#2-2-2-cd-amp-pwd-命令" class="headerlink" title="2.2.2 cd &amp; pwd 命令"></a>2.2.2 cd &amp; pwd 命令</h3><div class="note modern"><p>cd &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于切换到指令的目录</span></p>
<blockquote>
<p>Linux路径: 切换到指令的Linux目录, 不加参数时默认切换到home目录</p>
</blockquote>
</div>
<div class="note modern"><p>pwd <span class='p red'>&emsp;&emsp;该命令用于输出当前的目录</span></p>
</div>
<p>&nbsp;</p>
<h3 id="2-2-3-mkdir命令"><a href="#2-2-3-mkdir命令" class="headerlink" title="2.2.3 mkdir命令"></a>2.2.3 mkdir命令</h3><div class="note modern"><p>mkdir &emsp;[-p] &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于创建新的目录</span></p>
<blockquote>
<p>-p: 该参数将自动创建不存在的父目录, 通常用来创建连续多层级的目录 </p>
</blockquote>
</div>
<p>&nbsp;</p>
<h3 id="2-2-4-touch-amp-cat-amp-more-命令"><a href="#2-2-4-touch-amp-cat-amp-more-命令" class="headerlink" title="2.2.4 touch &amp; cat &amp; more 命令"></a>2.2.4 touch &amp; cat &amp; more 命令</h3><div class="note modern"><p>touch &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于创建新的文件</span></p>
</div>
<div class="note modern"><p>cat &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于查看文件的内容， 一次性展示所有内容</span></p>
</div>
<div class="note modern"><p>more &emsp;[Linux路径] <span class='p red'>&emsp;&emsp;该命令用于查看文件的内容，支持分页查看，空格分页，Q键退出</span></p>
</div>
<p>&nbsp;</p>
<h3 id="2-2-5-cp-amp-mv-amp-rm-命令"><a href="#2-2-5-cp-amp-mv-amp-rm-命令" class="headerlink" title="2.2.5 cp &amp; mv &amp; rm 命令"></a>2.2.5 cp &amp; mv &amp; rm 命令</h3><div class="note modern"><p>cp &emsp;[-r] &emsp;[参数1] &emsp; [参数2] <span class='p red'>&emsp;&emsp;该命令用于复制文件或文件夹</span></p>
<blockquote>
<p>-r: 可选，用于复制文件夹使用，表示递归<br>参数1: Linux路径，表示被复制的文件或文件夹<br>参数2: Linux路径，表示复制去的地方</p>
</blockquote>
</div>
<div class="note modern"><p>mv &emsp;[参数1] &emsp; [参数2] <span class='p red'>&emsp;&emsp;该命令用于移动文件或文件夹</span></p>
<blockquote>
<p>-r: 可选，用于复制文件夹使用，表示递归<br>参数1: Linux路径，表示被移动的文件或文件夹<br>参数2: Linux路径，表示移动去的地方，如果目标不存在，则进行改名，确保目标存在</p>
</blockquote>
</div>
<div class="note modern"><p>rm &emsp;[-r -f] &emsp; [参数1] &emsp; [参数2] ……… [参数N] <span class='p red'>&emsp;&emsp;该命令用于删除文件或文件夹</span></p>
<blockquote>
<p>-r: 可选，同cp命令，删除文件夹使用<br>-f: 可选，表示强制删除<br>参数1、参数2、…… 、参数N: 要删除的文件或文件夹路径，用空格隔开</p>
</blockquote>
</div>
<p>&nbsp;</p>
<h3 id="2-2-5-which-amp-find-命令"><a href="#2-2-5-which-amp-find-命令" class="headerlink" title="2.2.5 which &amp; find 命令"></a>2.2.5 which &amp; find 命令</h3><div class="note modern"><p>which &emsp;[要查找的命令] <span class='p red'>&emsp;&emsp;该命令用于查找命令程序文件所在的路径</span></p>
</div>
<div class="note modern"><p>find &emsp;[起始路径] &emsp; -name “被查找文件名”<span class='p red'>&emsp;&emsp;该命令用于从起始路径开始按文件名查找文件</span></p>
</div>
<div class="note modern"><p>find &emsp;[起始路径] &emsp; -size &emsp;+|-n[kMG] “被查找文件名”<span class='p red'>&emsp;&emsp;该命令用于从起始路径开始按文件大小查找文件</span></p>
<blockquote>
<p>+表示大于，-表示小于<br>n表示大小<br>kMG表示大小单位，k表示kb，M表示MB，G表示GB，-10k就是表示小于10kb的文件</p>
</blockquote>
</div>
<p>&nbsp;</p>
<h3 id="2-2-5-grep-amp-wc-命令"><a href="#2-2-5-grep-amp-wc-命令" class="headerlink" title="2.2.5 grep &amp; wc 命令"></a>2.2.5 grep &amp; wc 命令</h3><div class="note modern"><p>grep &emsp;[-n] &emsp; [关键字] &emsp; [文件路径] <span class='p red'>&emsp;&emsp;该命令用于从文件中通过关键字过滤文件行</span></p>
<blockquote>
<p>-n: 选项，可选，表示在结果中显示匹配行的行号<br>关键字: 参数，必选，表示过滤的的关键字，建议用“”括起来<br>文件路径: 参数，必选，表示要过滤的文件路径，<code>可作为内容输入端口</code></p>
</blockquote>
</div>
<div class="note modern"><p>wc &emsp;[-c -m -l -w] &emsp;[文件路径] <span class='p red'>&emsp;&emsp;该命令用于统计文件的行数，单词数量等</span></p>
<blockquote>
<p><strong>-c</strong>: 选项，统计bytes数量<br>-m: 选项，统计字符数量<br>-l: 选项，统计行数<br>-w: 选项，统计单词数量<br>文件路径: 参数，表示被统计的文件，<code>可作为内容输入端口</code></p>
</blockquote>
</div>
<p>&nbsp;</p>
<h3 id="2-2-5-echo-amp-tail-命令"><a href="#2-2-5-echo-amp-tail-命令" class="headerlink" title="2.2.5 echo &amp; tail 命令"></a>2.2.5 echo &amp; tail 命令</h3><div class="note modern"><p>echo &emsp;[输出内容] <span class='p red'>&emsp;&emsp;该命令用于在命令行输出指令内容</span></p>
</div>
<div class="note modern"><p>tail &emsp;[-f -num] &emsp; [Linux路径]<span class='p red'>&emsp;&emsp;该命令用于查看文件尾部内容，跟踪文件的最新更改</span></p>
<blockquote>
<p>-f: 选项，表示持续跟踪<br>-num: 选项，表示查看尾部多少行，不填默认10行<br>Linux路径: 参数，表示被跟踪的文件路径</p>
</blockquote>
</div>
<p>&nbsp;</p>
<h3 id="2-2-6-sudo命令"><a href="#2-2-6-sudo命令" class="headerlink" title="2.2.6 sudo命令"></a>2.2.6 sudo命令</h3><div class="note modern"><p>sudo &emsp; 其他命令<span class='p red'>&emsp;&emsp;为命令附上临时的root权限，使用前提是用户配置了sudo认证</span></p>
</div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令</title>
    <url>/2025/03/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>flask基础</title>
    <url>/2025/03/18/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="1-路由"><a href="#1-路由" class="headerlink" title="1.路由"></a>1.路由</h1><h2 id="1-1-注册路由"><a href="#1-1-注册路由" class="headerlink" title="1.1 注册路由"></a>1.1 注册路由</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过route()方法注册路由</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;&lt;h1&gt;这是首页!&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()    </span><br></pre></td></tr></table></figure>
<h2 id="1-2-URL传递参数"><a href="#1-2-URL传递参数" class="headerlink" title="1.2 URL传递参数"></a>1.2 URL传递参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;int:page&gt;&#x27;</span></span>) </span><span class="comment"># URL规则字符串加入变量page，int是Flask框架中内置的转换器，传递参数必须符合转换器所要求的数据类型，不加默认为string</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_num</span>(<span class="params">page</span>):       <span class="comment"># 将page传递给视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;&lt;p&gt;这是第<span class="subst">&#123;page&#125;</span>页&lt;/p&gt;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run() </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-1-自定义转换器"><a href="#1-2-1-自定义转换器" class="headerlink" title="1.2.1 自定义转换器"></a>1.2.1 自定义转换器</h3><p>&emsp;自定义转换器是一个类，需要继承werkzeug.routing模块中的BaseConverter类<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># BaseConverter包含一些属性和方法</span></span><br><span class="line"><span class="comment"># regex属性: 用于设置正则匹配规则</span></span><br><span class="line"><span class="comment"># to_python方法: 用于将URL中的参数的类型转换为需要传递到视图函数中的类型</span></span><br><span class="line"><span class="comment"># to_url方法: 用于将URL中的参数的类型转换为URL中使用的字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):  <span class="comment"># 自定义转换器</span></span><br><span class="line">    regex = <span class="string">&quot;1[3-9]\d&#123;9&#125;$&quot;</span>             <span class="comment"># 定义匹配手机号的规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到转换器字典中</span></span><br><span class="line"><span class="comment"># 格式：程序实例.url_map.converters[&quot;自定义转换器类型名称&quot;] = 自定义转换器的类名</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;mobile&#x27;</span>] = MobileConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;mobile:mobile&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_mobile</span>(<span class="params">mobile</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;手机号为<span class="subst">&#123;mobile&#125;</span>&#x27;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<h2 id="1-3-上下文"><a href="#1-3-上下文" class="headerlink" title="1.3 上下文"></a>1.3 上下文</h2><h3 id="1-3-1-请求上下文"><a href="#1-3-1-请求上下文" class="headerlink" title="1.3.1 请求上下文"></a>1.3.1 请求上下文</h3><h4 id="1-3-1-1-request对象"><a href="#1-3-1-1-request对象" class="headerlink" title="1.3.1.1 request对象"></a>1.3.1.1 request对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># request对象封装了请求信息</span></span><br><span class="line"><span class="comment"># user_agent: 属性，获取浏览器标识信息</span></span><br><span class="line"><span class="comment"># form: 属性，获取解析后的表单数据</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    user_agent = request.user_agent   <span class="comment"># 获取浏览器标识信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;user_agent&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-3-1-2-session对象"><a href="#1-3-1-2-session对象" class="headerlink" title="1.3.1.2 session对象"></a>1.3.1.2 session对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session <span class="comment"># 导入session对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;Your_secret_key&amp;^52@!&#x27;</span>  <span class="comment"># 设置secret_key的值</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session: <span class="comment"># 若用户已登录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你好: <span class="subst">&#123;session.get(<span class="string">&quot;username&quot;</span>)&#125;</span>&#x27;</span> <span class="comment"># 从session获取键username对应的值并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>: <span class="comment"># 获取请求的HTTP方式，发送的POST请求则执行if语句</span></span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>] <span class="comment"># 设置session值，保存键位为username的Cookie信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录成功!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;input type=submit value=&#x27;登录&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h3 id="1-3-2-应用上下文"><a href="#1-3-2-应用上下文" class="headerlink" title="1.3.2 应用上下文"></a>1.3.2 应用上下文</h3><h4 id="1-3-2-1-current-app对象"><a href="#1-3-2-1-current-app对象" class="headerlink" title="1.3.2.1 current_app对象"></a>1.3.2.1 current_app对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># current_app 对象表示当前激活的Flask应用程序实例</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app <span class="comment"># 导入current_app对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;Your_secret_key&amp;^52@!&#x27;</span>  <span class="comment"># 设置secret_key的值</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 通过current_app对象获取密钥</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;current_app.secret_key&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-3-2-2-g对象"><a href="#1-3-2-2-g对象" class="headerlink" title="1.3.2.2 g对象"></a>1.3.2.2 g对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># g 对象表示程序的全局临时变量</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g <span class="comment"># 导入 g 对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    user_id = <span class="string">&#x27;001&#x27;</span>      <span class="comment"># 设置用户id</span></span><br><span class="line">    user_name = <span class="string">&#x27;flask&#x27;</span>  <span class="comment"># 设置用户名称</span></span><br><span class="line">    g.user_id = user_id  <span class="comment"># 用g对象保存用户id</span></span><br><span class="line">    g.user_name = user_name <span class="comment"># 用g对象保存用户名称</span></span><br><span class="line">    result = db_query()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;result&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_query</span>():</span><br><span class="line">    user_id = g.user_id  <span class="comment"># 使用g对象获取用户id</span></span><br><span class="line">    user_name = g.user_name <span class="comment"># 使用g对象获取用户名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;user_id&#125;</span>:<span class="subst">&#123;user_name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="1-4-生成响应"><a href="#1-4-生成响应" class="headerlink" title="1.4 生成响应"></a>1.4 生成响应</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Flask中，Response类表示响应，它封装了响应报文的相关信息</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response <span class="comment"># 导入Response对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 使用Response类的构造方法生成响应，设置响应体为&#x27;Python&amp;Flask&#x27;，状态码为201，响应类型为text/html</span></span><br><span class="line">    resp = Response(response=<span class="string">&quot;Python&amp;Flask&quot;</span>, status=<span class="number">201</span>, content_type=<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="1-5-URL反向解析"><a href="#1-5-URL反向解析" class="headerlink" title="1.5 URL反向解析"></a>1.5 URL反向解析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for <span class="comment">#</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/flask&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;url_for(<span class="string">&#x27;greet&#x27;</span>)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># return f&#x27;&#123;url_for(&quot;hello&quot;, name=name)&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># 将age=20传入到URL地址中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;url_for(<span class="string">&quot;hello&quot;</span>, name=name, age=<span class="number">20</span>)&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="1-6-页面重定向"><a href="#1-6-页面重定向" class="headerlink" title="1.6 页面重定向"></a>1.6 页面重定向</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redirect(location, code=302, Response=None)</span></span><br><span class="line"><span class="comment"># location: 必选参数，表示重定向的URL地址</span></span><br><span class="line"><span class="comment"># code: 可选参数，表示重定向状态码，默认为302</span></span><br><span class="line"><span class="comment"># Response: 可选参数，表示实例化响应时使用的Response类，默认为werkzeug.wrappers.Response</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for, request, redirect, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;Your_secret_key&amp;^52@!&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你好:<span class="subst">&#123;session[<span class="string">&quot;username&quot;</span>]&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;input type=submit value=登录&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2-模板"><a href="#2-模板" class="headerlink" title="2.模板"></a>2.模板</h1><h2 id="2-1-创建模板"><a href="#2-1-创建模板" class="headerlink" title="2.1 创建模板"></a>2.1 创建模板</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">HTML代码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在templates文件夹下创建模板(HTML文件)，使用render_template()渲染模板文件</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Flask!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-1-模板基础语法"><a href="#2-1-模板基础语法" class="headerlink" title="2.1 模板基础语法"></a>2.1 模板基础语法</h2><h3 id="2-1-1-模板变量"><a href="#2-1-1-模板变量" class="headerlink" title="2.1.1 模板变量"></a>2.1.1 模板变量</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">HTML代码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在templates文件夹下创建模板(HTML文件)，使用render_template()渲染模板文件</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = <span class="string">&#x27;World&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, name=name) <span class="comment"># 等号前的name为对应模板变量的名称，后面的name为视图函数中定义的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body标签的内容修改为如下所示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板变量的语法格式 &#123;&#123; variable &#125;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-2-过滤器"><a href="#2-2-过滤器" class="headerlink" title="2.2 过滤器"></a>2.2 过滤器</h2><h3 id="2-2-1-内置过滤器"><a href="#2-2-1-内置过滤器" class="headerlink" title="2.2.1 内置过滤器"></a>2.2.1 内置过滤器</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">HTML代码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在templates文件夹下创建模板(HTML文件)，使用render_template()渲染模板文件</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/filters&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filters</span>():</span><br><span class="line">    num = -<span class="number">2.3</span></span><br><span class="line">    li = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">    string = <span class="string">&#x27;flask&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;filters.html&#x27;</span>, num=num, li=li, string=string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;# 过滤器格式: &#123;&#123; variable | filter(parameter) &#125;&#125; #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>绝对值: &#123;&#123; num | abs &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>转换为整数: &#123;&#123; num | int &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取随机元素: &#123;&#123; li | random &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取变量li的长度: &#123;&#123; li | length &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>排序: &#123;&#123; li | sort &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>首字母大写，其余小写: &#123;&#123; string | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>字母全部大写: &#123;&#123; string | upper &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>字符拼接: &#123;&#123; string | join(&#x27;-&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="2-2-2-自定义过滤器"><a href="#2-2-2-自定义过滤器" class="headerlink" title="2.2.2 自定义过滤器"></a>2.2.2 自定义过滤器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_filter(<span class="params">name=<span class="string">&#x27;reverse_list&#x27;</span></span>)   </span><span class="comment"># 注册自定义过滤器, name指定过滤器名称，默认值为被装饰的函数名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_filters</span>(<span class="params">data</span>): <span class="comment"># 自定义过滤器</span></span><br><span class="line">    <span class="keyword">return</span> data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;h4&gt;&#123;&#123; li | reverse_list &#125;&#125;&lt;/h4&gt; 在 HTML 可实现列表翻转</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-选择结构"><a href="#2-3-选择结构" class="headerlink" title="2.3 选择结构"></a>2.3 选择结构</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法格式</button><button type="button" class="tab">Python代码</button><button type="button" class="tab">HTML代码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法格式 --&gt;</span></span><br><span class="line">&#123;% if 条件语句1 %&#125;</span><br><span class="line">    语句1</span><br><span class="line">&#123;% elif 条件语句2 %&#125;</span><br><span class="line">    语句2</span><br><span class="line">......</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    语句n</span><br><span class="line">&#123;% endif %&#125; </span><br><span class="line"><span class="comment">&lt;!-- 必须以 &#123;% endif %&#125; 结尾 --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 在templates文件夹下创建模板(HTML文件)，使用render_template()渲染模板文件</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/query-score/&lt;int:score&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_score</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;query_rating.html&#x27;</span>, score=score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if score &lt; 60 %&#125;</span><br><span class="line">        不及格</span><br><span class="line">    &#123;% elif score &lt; 80 %&#125;</span><br><span class="line">        及格</span><br><span class="line">    &#123;% elif score &lt; 90 %&#125;</span><br><span class="line">        良好</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        优秀</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-4-循环结构"><a href="#2-4-循环结构" class="headerlink" title="2.4 循环结构"></a>2.4 循环结构</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法格式</button><button type="button" class="tab">Python代码</button><button type="button" class="tab">HTML代码</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法格式 --&gt;</span></span><br><span class="line">&#123;% for 临时变量 in 变量 %&#125;</span><br><span class="line">    语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/goods&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goods</span>():</span><br><span class="line">    goods_name = [<span class="string">&#x27;洗碗机&#x27;</span>, <span class="string">&#x27;电饭煲&#x27;</span>, <span class="string">&#x27;电烤箱&#x27;</span>, <span class="string">&#x27;微波炉&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;loop_struct.html&#x27;</span>, goods_name=goods_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% for good in goods_name %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; loop.index&#125;&#125;.&#123;&#123; good &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- loop.index为循环结构中的特殊变量，从1开始，表示当前循环的迭代数 --&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-5-宏的定义与调用"><a href="#2-5-宏的定义与调用" class="headerlink" title="2.5 宏的定义与调用"></a>2.5 宏的定义与调用</h2><h3 id="2-5-1-宏的定义"><a href="#2-5-1-宏的定义" class="headerlink" title="2.5.1 宏的定义"></a>2.5.1 宏的定义</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法格式</button><button type="button" class="tab">示例</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法格式 --&gt;</span></span><br><span class="line">&#123;% macro 宏的名称(参数列表) %&#125;</span><br><span class="line">    宏内部逻辑代码</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro inputstyle(name, value=&#x27;&#x27;, type=&#x27;checkbox&#x27;) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> <span class="attr">vluae</span>=<span class="string">&quot;&#123;&#123;value&#125;&#125;&quot;</span> <span class="attr">type</span> = <span class="string">&quot;&#123;&#123;type&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="2-5-2-宏的调用"><a href="#2-5-2-宏的调用" class="headerlink" title="2.5.2 宏的调用"></a>2.5.2 宏的调用</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">HTML代码</button><button type="button" class="tab">导入宏</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/macro&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">macro</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;macro.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% macro inputstyle(name, value=&#x27;&#x27;, type=&#x27;checkbox&#x27;) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;value&#125;&#125;&quot;</span> <span class="attr">type</span> = <span class="string">&quot;&#123;&#123;type&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>您目前对哪些技术感兴趣?<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;Python&#x27;) &#125;&#125; Python<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;Java&#x27;) &#125;&#125; Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;big_data&#x27;) &#125;&#125; big_data<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;HTML&#x27;) &#125;&#125; HTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;commit&#x27;, value=&quot;提交&quot;, type=&#x27;button&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% from &#x27;macro.html&#x27; import inputstyle %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-5-消息闪现"><a href="#2-5-消息闪现" class="headerlink" title="2.5 消息闪现"></a>2.5 消息闪现</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">home_page.html</button><button type="button" class="tab">login.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash, redirect, url_for, request, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;super secret key&#x27;</span> <span class="comment"># 设置secret_key</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home_page</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;home_page.html&#x27;</span>, username=username)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))    <span class="comment"># 重定向到登录页面</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_page</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 判断用户名是否为admin, 密码是否为123</span></span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="comment"># 发送登录失败的消息</span></span><br><span class="line">            flash(<span class="string">&#x27;用户名或密码错误&#x27;</span>, category=<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>] = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">            flash(<span class="string">&#x27;恭喜您，登录成功!&#x27;</span>, category=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">            <span class="comment"># 登录成功，重定向到主页面</span></span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home_page&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;#  调用 get_flashed_messages()函数，获取消息类别为info的消息  #&#125;</span><br><span class="line">    &#123;% for message in get_flashed_messages(category_filter = (&#x27;info&#x27;)) %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎用户:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;#  调用 get_flashed_messages()函数，获取消息类别为error的消息  #&#125;</span><br><span class="line">&#123;% for message in get_flashed_messages(category_filter = (&#x27;error&#x27;)) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-6-静态文件的加载"><a href="#2-6-静态文件的加载" class="headerlink" title="2.6 静态文件的加载"></a>2.6 静态文件的加载</h2><h3 id="2-6-1-图片文件"><a href="#2-6-1-图片文件" class="headerlink" title="2.6.1 图片文件"></a>2.6.1 图片文件</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">base.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static-file&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_file</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;base.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flask的logo图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;# 引用flask.png #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;flask.png&#x27;) &#125;&#125;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="2-6-2-CSS文件"><a href="#2-6-2-CSS文件" class="headerlink" title="2.6.2 CSS文件"></a>2.6.2 CSS文件</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">base.html</button><button type="button" class="tab">Italics.css</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static-file&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_file</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;base.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;# 引用Italics.css #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;Italics.css&#x27;) &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flask的logo图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;# 引用flask.png #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;flask.png&#x27;) &#125;&#125;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-style</span>: italic&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="2-7-模板继承"><a href="#2-7-模板继承" class="headerlink" title="2.7 模板继承"></a>2.7 模板继承</h2><p>&emsp;模板继承通过block和extends来实现。其中block用于标识与继承机制相关的代码块，extends用于指定子模板所继承的基模板。</p>
<h3 id="2-7-1-语法格式"><a href="#2-7-1-语法格式" class="headerlink" title="2.7.1 语法格式"></a>2.7.1 语法格式</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">继承语法格式</button><button type="button" class="tab">基模板定义格式</button><button type="button" class="tab">子模板定义格式</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends 基模板名称 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block 块名称 %&#125;</span><br><span class="line">    基模板代码</span><br><span class="line">&#123;% endblock 块名称 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends 基模板名称 %&#125;</span><br><span class="line">&#123;% block 块名称 %&#125;</span><br><span class="line">    子模板代码</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="2-7-2-示例"><a href="#2-7-2-示例" class="headerlink" title="2.7.2 示例"></a>2.7.2 示例</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">base.html</button><button type="button" class="tab">child.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/base&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;base.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/child&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">child</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;child.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flask的logo图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;# 引用flask.png #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;flask.png&#x27;) &#125;&#125;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是导航栏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>基模板的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是页脚<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>子模板的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<div class="note info modern"><p>extends语句必须位于子模板内容的第一行</p>
</div>
<h1 id="3-表单与类视图"><a href="#3-表单与类视图" class="headerlink" title="3.表单与类视图"></a>3.表单与类视图</h1><h2 id="3-1-Flask处理表单"><a href="#3-1-Flask处理表单" class="headerlink" title="3.1 Flask处理表单"></a>3.1 Flask处理表单</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">register.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, flash</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;super secret key&#x27;</span>     <span class="comment"># 设置密钥</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="comment"># 判断请求方式</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        password2 = request.form[<span class="string">&#x27;password2&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, password2]):</span><br><span class="line">            flash(<span class="string">&#x27;请输入完整信息&#x27;</span>, category=<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(username) &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="built_in">len</span>(username) &gt;<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(username) &gt; <span class="number">15</span>:</span><br><span class="line">            flash(<span class="string">&#x27;用户名长度应大于3小于15&#x27;</span>, category=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> password != password2:</span><br><span class="line">            flash(<span class="string">&#x27;密码不一致&#x27;</span>, category=<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;注册成功&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% macro print_error(type) %&#125;</span><br><span class="line">        &#123;% for message in get_flashed_messages(category_filter = (type)) %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red; display: inline&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endmacro %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&#123;&#123; print_error(&#x27;message&#x27;) &#125;&#125;</span><br><span class="line">        &#123;&#123; print_error(&#x27;info&#x27;) &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password2&quot;</span>&gt;</span>&#123;&#123; print_error(&#x27;error&#x27;) &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="3-2-Flask-WTF处理表单"><a href="#3-2-Flask-WTF处理表单" class="headerlink" title="3.2 Flask-WTF处理表单"></a>3.2 Flask-WTF处理表单</h2><h3 id="3-2-1-创建表单"><a href="#3-2-1-创建表单" class="headerlink" title="3.2.1 创建表单"></a>3.2.1 创建表单</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, flash</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length, EqualTo</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;super secret key&#x27;</span>     <span class="comment"># 设置密钥</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegistrationForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    <span class="comment"># 创建StringField类对象，通过validators参数指定验证器为DataRequired类和Length类的对象，用于限制用户名输入框的内容不能为空，以及长度为3到15个字符</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, validators=[DataRequired(message=<span class="string">&#x27;用户名不能为空&#x27;</span>), Length(<span class="number">3</span>, <span class="number">15</span>, message=<span class="string">&#x27;长度应为3~15个字符&#x27;</span>)])</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>, validators=[DataRequired(message=<span class="string">&#x27;密码不能为空&#x27;</span>)])</span><br><span class="line">    password2 = PasswordField(label=<span class="string">&#x27;确认密码&#x27;</span>, validators=[DataRequired(<span class="string">&#x27;密码不能为空&#x27;</span>), EqualTo(<span class="string">&#x27;password&#x27;</span>, message=<span class="string">&#x27;两次密码不一致&#x27;</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-渲染表单"><a href="#3-2-2-渲染表单" class="headerlink" title="3.2.2 渲染表单"></a>3.2.2 渲染表单</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">register_wtf.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    form = RegistrationForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register_wtf.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>&lt;!DOCTYPE html&gt;</p>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <h1>注册页面</h1>
    <form method="post" action="">

        <span></span><br>
        <br>
        <span></span><br>
        <br>
        <span></span><br>
        <br>
        <p></p>
    </form>
</body>
</html></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h3 id="3-2-3-验证表单"><a href="#3-2-3-验证表单" class="headerlink" title="3.2.3 验证表单"></a>3.2.3 验证表单</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">register_verification.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, flash</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length, EqualTo</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;super secret key&#x27;</span>     <span class="comment"># 设置密钥</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegistrationForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, render_kw=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="literal">False</span>&#125;, validators=[DataRequired(message=<span class="string">&#x27;用户名不能为空&#x27;</span>), Length(<span class="number">3</span>, <span class="number">15</span>, message=<span class="string">&#x27;长度应为3~15个字符&#x27;</span>)])</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>, render_kw=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="literal">False</span>&#125;, validators=[DataRequired(message=<span class="string">&#x27;密码不能为空&#x27;</span>)])</span><br><span class="line">    password2 = PasswordField(label=<span class="string">&#x27;确认密码&#x27;</span>, render_kw=&#123;<span class="string">&#x27;required&#x27;</span>: <span class="literal">False</span>&#125;, validators=[DataRequired(<span class="string">&#x27;密码不能为空&#x27;</span>), EqualTo(<span class="string">&#x27;password&#x27;</span>, message=<span class="string">&#x27;两次密码不一致&#x27;</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    form = RegistrationForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;注册成功!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register_verification.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;# 定义宏循环遍历错误信息列表#&#125;</span><br><span class="line">        &#123;% macro print_error(form_fields) %&#125;</span><br><span class="line">        &#123;% for error_message in form_fields %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                 display:inline;&quot;</span> &gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endmacro %&#125;</span><br><span class="line">        &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.username.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.username &#125;&#125;&#123;&#123; print_error(form.username.errors) &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.password.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password &#125;&#125;&#123;&#123; print_error(form.password.errors) &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.password2.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password2 &#125;&#125;&#123;&#123; print_error(form.password2.errors) &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="3-3-类视图"><a href="#3-3-类视图" class="headerlink" title="3.3 类视图"></a>3.3 类视图</h2><h3 id="3-3-1-标准类视图"><a href="#3-3-1-标准类视图" class="headerlink" title="3.3.1 标准类视图"></a>3.3.1 标准类视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># class MyView(View):                             # 定义类视图</span></span><br><span class="line"><span class="comment">#     def dispatch_request(self, name):        # 重写dispatch_request()方法</span></span><br><span class="line"><span class="comment">#         return f&#x27;hello &#123;name&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">View</span>):                              <span class="comment"># 定义类视图</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]                   <span class="comment"># 指定请求方式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self, name</span>):         <span class="comment"># 重写dispatch_request()方法</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 将类视图与URL规则进行映射</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span>, view_func=MyView.as_view(<span class="string">&#x27;myview&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h3 id="3-3-2-基于方法的类视图"><a href="#3-3-2-基于方法的类视图" class="headerlink" title="3.3.2 基于方法的类视图"></a>3.3.2 基于方法的类视图</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Python代码</button><button type="button" class="tab">login.html</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> MethodView</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):                                       <span class="comment"># 处理GET请求</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):   							   <span class="comment"># 处理POST请求</span></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)     <span class="comment"># 获取输入的用户名</span></span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)     <span class="comment"># 获取输入的密码</span></span><br><span class="line">        <span class="comment"># 判断用户名和密码是否为123</span></span><br><span class="line">        <span class="keyword">if</span> username ==<span class="string">&#x27;flask&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;用户：<span class="subst">&#123;username&#125;</span>登录成功。&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户名或密码错误，请重新登录。&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h2 id="3-4-蓝图"><a href="#3-4-蓝图" class="headerlink" title="3.4 蓝图"></a>3.4 蓝图</h2><p>&emsp;Flask程序中使用蓝图，首先要创建蓝图，然后对蓝图进行注册。示例如下:<br><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">user.py</button><button type="button" class="tab">admin.py</button><button type="button" class="tab">app.py</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)  <span class="comment"># 创建蓝图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)  </span><span class="comment"># 定义URL规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_login&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)  </span><span class="comment"># 定义URL规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_register&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">admin = Blueprint(<span class="string">&#x27;admin&#x27;</span>, __name__)  <span class="comment"># 创建蓝图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)  </span><span class="comment"># 定义URL规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;admin_login&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;admin_add&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> admin <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(admin, url_prefix=<span class="string">&#x27;/admin&#x27;</span>)  <span class="comment"># 将蓝图admin进行注册</span></span><br><span class="line">app.register_blueprint(user, url_prefix=<span class="string">&#x27;/user&#x27;</span>)    <span class="comment"># 将蓝图user进行注册</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></p>
<h1 id="4-数据库操作"><a href="#4-数据库操作" class="headerlink" title="4. 数据库操作"></a>4. 数据库操作</h1><h2 id="4-1-连接数据库"><a href="#4-1-连接数据库" class="headerlink" title="4.1 连接数据库"></a>4.1 连接数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过URI连接数据库</span></span><br><span class="line"><span class="comment"># URI典型格式: dialect+driver://username:password@host:port/database</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql+pymysql://root:lyk041107@127.0.0.1:3306/test&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2-定义模型"><a href="#4-2-定义模型" class="headerlink" title="4.2 定义模型"></a>4.2 定义模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个表示用户的模型类</span></span><br><span class="line"><span class="comment"># User类对应的数据表为user, MyUser类对应的数据表为my_user</span></span><br><span class="line"><span class="comment"># db.Column类封装了字段的相关属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h2 id="4-3-数据操作"><a href="#4-3-数据操作" class="headerlink" title="4.3 数据操作"></a>4.3 数据操作</h2><h3 id="4-3-1-增加数据"><a href="#4-3-1-增加数据" class="headerlink" title="4.3.1 增加数据"></a>4.3.1 增加数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过URI连接数据库</span></span><br><span class="line"><span class="comment"># URI典型格式: dialect+driver://username:password@host:port/database</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql+pymysql://root:lyk041107@127.0.0.1:3306/test&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 关闭不必要的跟踪</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个表示用户的模型类</span></span><br><span class="line"><span class="comment"># User类对应的数据表为user, MyUser类对应的数据表为my_user</span></span><br><span class="line"><span class="comment"># db.Column类封装了字段的相关属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    user1 = User(username=<span class="string">&quot;小明&quot;</span>, email=<span class="string">&quot;123@qq.com&quot;</span>)</span><br><span class="line">    user2 = User(username=<span class="string">&quot;小红&quot;</span>, email=<span class="string">&quot;146@qq.com&quot;</span>)</span><br><span class="line">    user3 = User(username=<span class="string">&quot;小刚&quot;</span>, email=<span class="string">&quot;543@qq.com&quot;</span>)</span><br><span class="line">    <span class="comment"># 将User类的对象添加到数据库会话中</span></span><br><span class="line">    db.session.add(user1)</span><br><span class="line">    db.session.add_all([user2, user3])</span><br><span class="line">    <span class="comment"># 使用commit()方法从数据库会话提交至数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-查询数据"><a href="#4-3-2-查询数据" class="headerlink" title="4.3.2 查询数据"></a>4.3.2 查询数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过URI连接数据库</span></span><br><span class="line"><span class="comment"># URI典型格式: dialect+driver://username:password@host:port/database</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql+pymysql://root:lyk041107@127.0.0.1:3306/test&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 关闭不必要的跟踪</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个表示用户的模型类</span></span><br><span class="line"><span class="comment"># User类对应的数据表为user, MyUser类对应的数据表为my_user</span></span><br><span class="line"><span class="comment"># db.Column类封装了字段的相关属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r %r&gt;&#x27;</span> % (<span class="variable language_">self</span>.username , <span class="variable language_">self</span>.email)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    user1 = User(username=<span class="string">&quot;小明&quot;</span>, email=<span class="string">&quot;123@qq.com&quot;</span>)</span><br><span class="line">    user2 = User(username=<span class="string">&quot;小红&quot;</span>, email=<span class="string">&quot;146@qq.com&quot;</span>)</span><br><span class="line">    user3 = User(username=<span class="string">&quot;小刚&quot;</span>, email=<span class="string">&quot;543@qq.com&quot;</span>)</span><br><span class="line">    <span class="comment"># 将User类的对象添加到数据库会话中</span></span><br><span class="line">    db.session.add(user1)</span><br><span class="line">    db.session.add_all([user2, user3])</span><br><span class="line">    <span class="comment"># 使用commit()方法从数据库会话提交至数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/query&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>():</span><br><span class="line">    <span class="comment"># 查询全部记录</span></span><br><span class="line">    users = User.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="built_in">print</span>(users)</span><br><span class="line">    <span class="comment"># 查询第一条记录</span></span><br><span class="line">    first_user = User.query.first()</span><br><span class="line">    <span class="built_in">print</span>(first_user)</span><br><span class="line">    <span class="comment"># 返回主键值为2的记录</span></span><br><span class="line">    id_user = User.query.get(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(id_user)</span><br><span class="line">    <span class="comment"># 过滤User.username为&quot;小明&quot;的记录</span></span><br><span class="line">    users2 = User.query.<span class="built_in">filter</span>(User.username==<span class="string">&quot;小明&quot;</span>).first()</span><br><span class="line">    <span class="built_in">print</span>(users2)</span><br><span class="line">    <span class="comment"># 过滤email为&quot;123@qq.com&quot;的记录</span></span><br><span class="line">    users3 = User.query.filter_by(email=<span class="string">&quot;123@qq.com&quot;</span>).first()</span><br><span class="line">    <span class="built_in">print</span>(users3)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-更新数据"><a href="#4-3-3-更新数据" class="headerlink" title="4.3.3 更新数据"></a>4.3.3 更新数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/update&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>():</span><br><span class="line">    result = User.query.get(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(result.username)</span><br><span class="line">    result.username = <span class="string">&quot;小兰&quot;</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-4-删除数据"><a href="#4-3-4-删除数据" class="headerlink" title="4.3.4 删除数据"></a>4.3.4 删除数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    result = User.query.get(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    db.session.delete(result)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
</search>
